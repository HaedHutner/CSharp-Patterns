//////////////////////// Real-World /////////////////////////

using System;
using System.Collections.Generic;
namespace GangOfFour.Builder.RealWorld
{
    /// <summary>
    /// MainApp startup class for Real-World 
    /// Builder Design Pattern.
    /// </summary>
    public class MainApp
    {
        /// <summary>
        /// Entry point into console application.
        /// </summary>
        public static void Main ()
        {
            VehicleBuilder builder;
            // Create shop with vehicle builders
            Shop shop = new Shop ();
            // Construct and display vehicles
            builder = new ScooterBuilder ();
            shop.Construct (builder);
            builder.Vehicle.Show ();
            builder = new CarBuilder ();
            shop.Construct (builder);
            builder.Vehicle.Show ();
            builder = new MotorCycleBuilder ();
            shop.Construct (builder);
            builder.Vehicle.Show ();
            // Wait for user
            Console.ReadKey ();
        }
    }
    /// <summary>
    /// The 'Director' class
    /// </summary>
    class Shop
    {
        // Builder uses a complex series of steps
        public void Construct (VehicleBuilder vehicleBuilder)
        {
            vehicleBuilder.BuildFrame ();
            vehicleBuilder.BuildEngine ();
            vehicleBuilder.BuildWheels ();
            vehicleBuilder.BuildDoors ();
        }
    }
    /// <summary>
    /// The 'Builder' abstract class
    /// </summary>
    abstract class VehicleBuilder
    {
        protected Vehicle vehicle;
        // Gets vehicle instance
        public Vehicle Vehicle
        {
            get { return vehicle; }
        }
        // Abstract build methods
        public abstract void BuildFrame ();
        public abstract void BuildEngine ();
        public abstract void BuildWheels ();
        public abstract void BuildDoors ();
    }
    /// <summary>
    /// The 'ConcreteBuilder1' class
    /// </summary>
    class MotorCycleBuilder : VehicleBuilder
    {
        public MotorCycleBuilder ()
        {
            vehicle = new Vehicle ("Мотор");
        }
        public override void BuildFrame ()
        {
            vehicle["frame"] = "Рамка на Мотор";
        }
        public override void BuildEngine ()
        {
            vehicle["engine"] = "500 кубични сантиметра";
        }
        public override void BuildWheels ()
        {
            vehicle["wheels"] = "2";
        }
        public override void BuildDoors ()
        {
            vehicle["doors"] = "0";
        }
    }
    /// <summary>
    /// The 'ConcreteBuilder2' class
    /// </summary>
    class CarBuilder : VehicleBuilder
    {
        public CarBuilder ()
        {
            vehicle = new Vehicle ("Кола");
        }
        public override void BuildFrame ()
        {
            vehicle["frame"] = "Рамка на Кола";
        }
        public override void BuildEngine ()
        {
            vehicle["engine"] = "2500 кубични сантиметра";
        }
        public override void BuildWheels ()
        {
            vehicle["wheels"] = "4";
        }
        public override void BuildDoors ()
        {
            vehicle["doors"] = "4";
        }
    }
    /// <summary>
    /// The 'ConcreteBuilder3' class
    /// </summary>
    class ScooterBuilder : VehicleBuilder
    {
        public ScooterBuilder ()
        {
            vehicle = new Vehicle ("Скутер");
        }
        public override void BuildFrame ()
        {
            vehicle["frame"] = "Рамка на скутер";
        }
        public override void BuildEngine ()
        {
            vehicle["engine"] = "50 cc";
        }
        public override void BuildWheels ()
        {
            vehicle["wheels"] = "2";
        }
        public override void BuildDoors ()
        {
            vehicle["doors"] = "0";
        }
    }
    /// <summary>
    /// The 'Product' class
    /// </summary>
    class Vehicle
    {
        private string _vehicleType;
        private Dictionary<string, string> _parts =
            new Dictionary<string, string> ();
        // Constructor
        public Vehicle (string vehicleType)
        {
            this._vehicleType = vehicleType;
        }
        // Indexer
        public string this [string key]
        {
            get { return _parts[key]; }
            set { _parts[key] = value; }
        }
        public void Show ()
        {
            Console.WriteLine ("\n---------------------------");
            Console.WriteLine ("Тип на двигателя: {0}", _vehicleType);
            Console.WriteLine (" Рамка : {0}", _parts["frame"]);
            Console.WriteLine (" Двигател : {0}", _parts["engine"]);
            Console.WriteLine (" #Гуми: {0}", _parts["wheels"]);
            Console.WriteLine (" #Врати : {0}", _parts["doors"]);
        }
    }
}

/*
Output:

---------------------------
Тип на двигателя: Скутер
 Рамка : Рамка на скутер
 Двигател : 50 cc
 #Гуми: 2
 #Врати : 0

---------------------------
Тип на двигателя: Кола
 Рамка : Рамка на Кола
 Двигател : 2500 кубични сантиметра
 #Гуми: 4
 #Врати : 4

---------------------------
Тип на двигателя: Мотор
 Рамка : Рамка на Мотор
 Двигател : 500 кубични сантиметра
 #Гуми: 2
 #Врати : 0

 */

///////////////////////////// My Implementation /////////////////////////////////

namespace std_3_st2 {

    public class MainApp {
        public static void Main () {
            Student[] students = {
                new StudentBuilder ()
                .Name ("Мирослав Василев")
                .Age (21)
                .EGN (9912319999)
                .EyeColor ("Кафяви")
                .FacultyNumber (1601681060)
                .Specialty ("СТД")
                .Build (),
                new StudentBuilder ()
                .Name ("Калеко Алеко")
                .Age (46)
                .EGN (5305037893)
                .EyeColor ("Черни")
                .FacultyNumber (1601182060)
                .Specialty ("???")
                .Build ()
            };

            foreach (Student student in students) {
                System.Console.WriteLine ("------------");
                System.Console.WriteLine ("Име: {0}", student.Name);
                System.Console.WriteLine ("Възраст: {0}", student.Age);
                System.Console.WriteLine ("ЕГН: {0}", student.EGN);
                System.Console.WriteLine ("Цвят на очите: {0}", student.EyeColor);
                System.Console.WriteLine ("Факултетен номер: {0}", student.FacultyNumber);
                System.Console.WriteLine ("Специалност: {0}", student.Specialty);
            }
        }
    }
    public interface Person {
        string Name { get; set; }

        string EyeColor { get; set; }

        long EGN { get; set; }

        int Age { get; set; }
    }

    public class Student : Person {
        public string Name { get; set; }

        public string EyeColor { get; set; }

        public long EGN { get; set; }

        public int Age { get; set; }

        public long FacultyNumber { get; set; }

        public string Specialty { get; set; }
    }

    public class StudentBuilder {
        private string name;
        private long egn;
        private int age;
        private string eyeColor;
        private string specialty;
        private long facultyNumber;

        public StudentBuilder () { }

        public StudentBuilder Name (string name) {
            this.name = name;
            return this;
        }

        public StudentBuilder EGN (long egn) {
            this.egn = egn;
            return this;
        }

        public StudentBuilder Age (int age) {
            this.age = age;
            return this;
        }

        public StudentBuilder EyeColor (string eyeColor) {
            this.eyeColor = eyeColor;
            return this;
        }

        public StudentBuilder FacultyNumber (long facultyNumber) {
            this.facultyNumber = facultyNumber;
            return this;
        }

        public StudentBuilder Specialty (string specialty) {
            this.specialty = specialty;
            return this;
        }

        public Student Build () {
            Student student = new Student ();
            student.Name = name;
            student.Age = age;
            student.EyeColor = eyeColor;
            student.EGN = egn;
            student.FacultyNumber = facultyNumber;
            student.Specialty = specialty;

            return student;
        }
    }
}

/*
Output:

------------
Име: Мирослав Василев
Възраст: 21
ЕГН: 9912319999
Цвят на очите: Кафяви
Факултетен номер: 1601681060
Специалност: СТД
------------
Име: Калеко Алеко
Възраст: 46
ЕГН: 5305037893
Цвят на очите: Черни
Факултетен номер: 1601182060
Специалност: ???
 */